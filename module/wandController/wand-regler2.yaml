esphome:
  name: wand-regler

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "9AJ3WfI622Q+YSzeaV1YrUBeWrJOuiuBpFbmVE7QAro="

ota:
  password: "c17b5c4b4242d6598ff31cea1ce0a42b"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Wand-Regler Demo"
    password: "zobEHQAA0ScO"

captive_portal:

# Example configuration entry
spi:
  - id: spi_display
    clk_pin: GPIO5
    mosi_pin: GPIO23 
    # miso_pin: GPIO19 # nicht benutzt da das Display keine Daten schickt
  - id: spi_touch
    clk_pin: GPIO18
    mosi_pin: GPIO33 # Der Touch sendet nur
    miso_pin: GPIO19 # nicht benutzt da das Display keine Daten schickt



output:
  - id: light_output
    platform: gpio
    pin: GPIO32

light:
  - platform: binary
    output: light_output
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: fontRoboto
    size: 20

color:
  - id: my_red
    hex: FF3340
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%

display:
  - platform: ili9xxx
    spi_id: spi_display
    model: TFT 2.4R
    reset_pin: GPIO4
    cs_pin: GPIO15
    dc_pin: GPIO2 
    # rotation: 90
    update_interval: 1s
    # dimensions: 320x240
    data_rate: 80Mhz
    lambda: |-
      it.print(0, 0, id(fontRoboto), "Temp: was auch sonst");
      // Draw a line from [0,0] to [100,50]
      it.line(0, 0, 320, 240);
      // it.fill(my_yellow);
      // if (id(my_touchscreen).touched)
      //  it.filled_circle(id(my_touchscreen).x, id(my_touchscreen).y, 10, my_red);              

touchscreen:
  platform: xpt2046
  spi_id: spi_touch
  id: my_touchscreen
  cs_pin: GPIO21
  interrupt_pin: GPIO27
  update_interval: 20ms
  report_interval: 1s
  threshold: 400
  #calibration_x_min: 281
  #calibration_x_max: 3800
  #calibration_y_min: 347
  #calibration_y_max: 3878
  swap_x_y: false
  on_touch:
    - lambda: |-
        if (id(my_touchscreen).touched){
          ESP_LOGE("TOUCH", "Touched");
        } else{
          ESP_LOGE("TOUCH", "NOT Touched");
        }
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
          id(my_touchscreen).x,
          id(my_touchscreen).y,
          id(my_touchscreen).x_raw,
          id(my_touchscreen).y_raw
        );      
  
binary_sensor:  
  - platform: touchscreen
    id: touch_anywhere_on_screen
    x_min: 0
    x_max: 240
    y_min: 0
    y_max: 320
    on_press:
      - lambda: |-
          ESP_LOGE("ON press", "Touched");
          id(touch_anywhere_on_screen).publish_state(false);
